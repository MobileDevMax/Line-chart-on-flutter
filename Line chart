import 'package:flutter/material.dart';
import 'dart:math';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Line Chart',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LineChartHome(),
    );
  }
}

class LineChartHome extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Line Chart'),
      ),
      body: Center(
        child: LineChartWidget(),
      ),
    );
  }
}

class LineChartWidget extends StatelessWidget {
  final List<double> data = [1, 3, 2, 5, 4, 6, 3, 8, 7, 9]; // Line graph data

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      size: Size(300, 200), // Size chart
      painter: LineChartPainter(data),
    );
  }
}

class LineChartPainter extends CustomPainter {
  final List<double> data;
  final double maxDataValue;

  LineChartPainter(this.data) : maxDataValue = data.reduce(max);

  @override
  void paint(Canvas canvas, Size size) {
    Paint linePaint = Paint()
      ..color = Colors.blue
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2.0;

    Paint pointPaint = Paint()
      ..color = Colors.red
      ..style = PaintingStyle.fill;

    double width = size.width;
    double height = size.height;

    // Scaling data for graph display
    double xStep = width / (data.length - 1); // X-axis step
    double yScale = height / (maxDataValue + 1); // Y-axis scale

    // Drawing lines
    for (int i = 0; i < data.length - 1; i++) {
      double startX = i * xStep;
      double startY = height - (data[i] * yScale);
      double endX = (i + 1) * xStep;
      double endY = height - (data[i + 1] * yScale);
      
      canvas.drawLine(Offset(startX, startY), Offset(endX, endY), linePaint);
    }

    // Drawing points
    for (int i = 0; i < data.length; i++) {
      double x = i * xStep;
      double y = height - (data[i] * yScale);
      canvas.drawCircle(Offset(x, y), 4, pointPaint); // Drawing circles
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false; // The graph should not be redrawn
  }
}
